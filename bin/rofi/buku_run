#!/usr/bin/env bash
# https://github.com/carnager/buku_run
# https://github.com/GandaG/buku_run
# https://github.com/Cybolic/buku_run !!jq
# https://github.com/knatsakis/rofi-buku !!
# https://github.com/davatorium/rofi/issues/1069#issuecomment-599724565
# rofi_l() {
#   rofi -dmenu -i -no-levenshtein-sort -width 1000 "$@"
# }
sep='\n'
_rofi() {
	rofi \
		-theme-str 'mainbox {children: [ "inputbar", "message", "listview", "mode-switcher" ];}' \
		-theme-str 'window {location: center; anchor: center; fullscreen: false; height: 280px; width: 960px;}' \
		-theme-str 'listview {columns: 1; spacing: 1px;}' \
		-theme-str 'element-text {horizontal-align: 0;}' \
		-theme-str 'element-icon {enabled: false;}' \
		-theme-str 'textbox {horizontal-align: 0;}' \
		-dmenu -i -matching fuzzy -sorting-method fzf -width 1000 "$@" \
		-sep $sep -eh 3
}
rofi_l() {
  rofi \
    -theme-str 'window {location: center; anchor: center; fullscreen: false; height: 280px; width: 960px;}' \
		-theme-str 'listview {columns: 1; spacing: 1px;}' \
		-theme-str 'element-text {horizontal-align: 0;}' \
		-theme-str 'element-icon {enabled: false;}' \
    -dmenu -i -no-levenshtein-sort -width 1000 "$@"
}
# display settings
display_type=5
max_str_width=100

# keybindings
switch_view="Alt+Tab"
new_bookmark="Alt+n"
actions="Alt+a"
edit="Alt+e"
delete="Alt+d"

# colors
help_color="#334433"

# source global config
if [[ -f /etc/buku_run.config ]]; then
	source /etc/buku_run.config
fi

# source local config:
if [[ -z $XDG_CONFIG_DIR ]]; then
	if [[ -f $HOME/.config/buku_run/config ]]; then
		source $HOME/.config/buku_run/config
	else
		echo "User config file '~/.config/buku_run/config' not found. using global config"
	fi
else
	if [[ -f "${XDG_CONFIG_DIR}/buku_run/config" ]]; then
		source "${XDG_CONFIG_DIR}/buku_run/config"
	else
		echo "User config file '~/.config/buku_run/config' not found. using global config"
	fi
fi

main() {
	HELP="Welcome to Buku. Use <span color='${help_color}'>${new_bookmark}</span> to add a new Bookmark
Use <span color='${help_color}'>${switch_view}</span> to switch View. <span color='${help_color}'>${actions}</span> for actions"
	if [[ $mode == "bookmarks" ]]; then
		content=$(parseBuku)
		menu=$(echo "${content}" | _rofi -p '> ' -filter "${filter}" -mesg "${HELP}" -kb-custom-1 "${new_bookmark}" -kb-custom-2 "${switch_view}" -kb-custom-3 "${actions}" -kb-custom-4 "${edit}" -kb-custom-5 "${delete}")
	elif [[ $mode == "tags" ]]; then
		menu=$(buku --nostdin --np --st | grep -v -e '^waiting for input$' -e '^$' | awk '{$NF=""; print $0}' | cut -d ' ' -f2- | rofi_l -p '> ' -mesg "${HELP}" -kb-custom-1 "${new_bookmark}" -kb-custom-2 "${switch_view}" -kb-custom-3 "${actions}" -kb-custom-4 "${edit}" -kb-custom-5 "${delete}")
	fi
	val=$?
	if [[ $val -eq 1 ]]; then
		exit
	elif [[ $val -eq 12 ]]; then
		optionsMenu
	elif [[ $val -eq 10 ]]; then
		addMark
	elif [[ $val -eq 14 ]]; then
		deleteMenu
	elif [[ $val -eq 13 ]]; then
		editMenu
	elif [[ $val -eq 11 ]]; then
		if [[ $mode == "bookmarks" ]]; then
			export mode="tags"
			mode=tags main
		elif [[ $mode == "tags" ]]; then
			export mode="bookmarks"
			mode=bookmarks main
		fi
	elif [[ $val -eq 0 ]]; then
		if [[ $mode == "bookmarks" ]]; then
			id=$(getId "$content" "$menu")
			for bm in ${id}; do
				buku --nostdin -o "${bm}"
			done
		elif [[ $mode == "tags" ]]; then
			filter="${menu}" mode="bookmarks" main
		fi
	fi
}

optionsMenu() {
	if [[ $mode == "bookmarks" ]]; then
		askmenu=$(echo -e "< Return\\n---\\n1. Edit\\n2. Delete" | rofi_l -p '> ' -mesg "Choose Action for bookmark")
		val=$?
		if [[ $val -eq 1 ]]; then
			exit
		elif [[ $val -eq 0 ]]; then
			if [[ $askmenu == "< Return" ]]; then
				export mode=bookmarks
				main
			elif [[ $askmenu == "1. Edit" ]]; then
				editMenu
			elif [[ $askmenu == "2. Delete" ]]; then
				deleteMenu
			fi
		fi
	elif [[ $mode == "tags" ]]; then
		askmenu=$(echo -e "< Return\\n---\\n1. Replace Tag\\n2. Delete Tag" | rofi_l -p '> ' -mesg "Choose Action for tag \"${menu}\"")
		val=$?
		if [[ $val -eq 1 ]]; then
			exit
		elif [[ $val -eq 0 ]]; then
			if [[ $askmenu == "< Return" ]]; then
				export mode=tags
				main
			elif [[ $askmenu == "1. Replace Tag" ]]; then
				newtag=$(echo | rofi_l -p '> ' -mesg "Enter new tag name for tag \"${menu}\"")
				val=$?
				if [[ $val -eq 1 ]]; then
					exit
				elif [[ $val -eq 0 ]]; then
					if [[ $newtag == "" ]]; then
						mode=tags main
					else
						buku --nostdin -replace "${menu}" "${newtag}"
						mode=tags main
					fi
				fi
			elif [[ $askmenu == "2. Delete Tag" ]]; then
				delask=$(echo -e "1. Yes\\n2. No" | rofi_l -p '> ' -mesg "Really delete tag \"${menu}\" from ALL bookmarks?")
				val=$?
				if [[ $val -eq 1 ]]; then
					exit
				elif [[ $val -eq 0 ]]; then
					if [[ $delask == "1. Yes" ]]; then
						# buku --nostdin -r "${menu}"
						echo y | script -qfc "buku --nostdin --replace ${menu}" /dev/null
						mode=tags main
					elif [[ $delask == "2. No" ]]; then
						mode=tags main
					fi
				fi
			fi
		fi
	fi
}

deleteMenu() {
	id=$(getId "$content" "$menu")
	delask=$(echo -e "1. Yes\\n2. No" | rofi_l -p '> ' -mesg "Really delete bookmark?")
	val=$?
	if [[ $val -eq 1 ]]; then
		exit
	elif [[ $val -eq 0 ]]; then
		if [[ $delask == "1. Yes" ]]; then
			buku -d ${id} --tacit
			mode=bookmarks main
		elif [[ $delask == "2. No" ]]; then
			optionsMenu
		fi
	fi
}

editMenu() {
	id=$(getId "$content" "$menu")

	title="$(getTitleFromId "${id}")"
	url="$(getUrlFromId "${id}")"
	comment="$(getCommentFromId "${id}")"
	tags="$(getTagsFromId "${id}")"

	content="1. Title: $title\\n2. URL: $url\\n3. Comment: $comment\\n4. Tags: $tags"
	editmenu=$(echo -e "< Return\\n---\\n${content}" | rofi_l -p '> ')
	val=$?

	if [[ $val -eq 1 ]]; then
		exit
	elif [[ $val -eq 0 ]]; then
		if [[ $editmenu == "< Return" ]]; then
			main
		elif [[ $editmenu =~ Title:* ]]; then
			editTitle
		elif [[ $editmenu =~ URL:* ]]; then
			editUrl
		elif [[ $editmenu =~ Comment:* ]]; then
			editComment
		elif [[ $editmenu == "Tags: NOTAG" ]]; then
			addTags --update
		elif [[ $editmenu =~ Tags:* ]]; then
			tags="${tags}" editTags
		fi
	fi
}

editTitle() {
	titlemenu=$(echo "" | rofi_l -p "> " -filter "${title}" -mesg "Edit Title and hit Enter")
	val=$?
	if [[ $val -eq 1 ]]; then
		exit
	elif [[ $val -eq 0 ]]; then
		buku --nostdin -u "${id}" --title "${titlemenu}"
	fi
	mode=bookmarks main
}

editUrl() {
	urlmenu=$(echo "" | rofi_l -p "> " -filter "${url}" -mesg "Edit URL and hit Enter")
	val=$?
	if [[ $val -eq 1 ]]; then
		exit
	elif [[ $val -eq 0 ]]; then
		if [[ $urlmenu == "http"* ]]; then
			buku --nostdin -u "${id}" --url "${urlmenu}"
		else
			echo "" | rofi_l -e "Not a valid URI, Make sure URLs start with http"
			editUrl
		fi
	fi
	mode=bookmarks main
}

editComment() {
	commentmenu=$(echo "" | rofi_l -p "> " -filter "${comment}" -mesg "Edit Comment and hit Enter")
	val=$?

	if [[ $val -eq 1 ]]; then
		exit
	elif [[ $val -eq 0 ]]; then
		buku --nostdin -u "${id}" --comment "${commentmenu}"
	fi

	mode=bookmarks main
}

editTags() {
	edittagsmenu=$(echo | rofi_l -filter "${tags}" -p '> ' -mesg "Edit Tags and hit Enter")
	val=$?
	if [[ $val -eq 1 ]]; then
		exit
	elif [[ $val -eq 0 ]]; then
		buku --nostdin -u "${id}" --tag "${edittagsmenu}"
	fi
	mode=bookmarks main
}

addMark() {
	givenurl=${1:-"$(xclip -o)"}
	inserturl=$(echo -e "$givenurl" | rofi_l -p '> ' -mesg "Use URL below or type manually")
	val=$?
	if [[ $val -eq 1 ]]; then
		exit
	elif [[ $val -eq 0 ]]; then
		addTags
	fi
}

addTags() {
	inserttags=$(buku --nostdin --np --st | grep -v '^waiting for input$' | awk '{$NF=""; print $0}' | cut -d ' ' -f2- | rofi_l -p '> ' -mesg "Add some tags. Separate tags with ', '")
	val=$?
	if [[ $val -eq 1 ]]; then
		exit
	elif [[ $val -eq 0 ]]; then
		if [[ $(echo "${inserttags}" | wc -l) -gt 1 ]]; then
			taglist=$(echo "${inserttags}" | tr '\n' ',')
			tags=()
			for tag in $taglist; do
				tags+=("$tag")
			done
		else
			tags=${inserttags}
		fi
		if [[ $1 == "--update" ]]; then
			buku --nostdin -u "${id}" --tag "${tags}"
		else
			buku --nostdin -a "${inserturl}" "${tags}"
		fi
	fi
}

parseBuku() {
	jq_program='.[] | (.index | tostring) + "\t" + .title[0:'$max_str_width'] + "\t " + .tags'
	if [ "$display_type" = "1" ]; then
		jq_program='.[] | (.index | tostring) + "\t" + .uri[0:'$max_str_width'] + "\t " + .tags'
	elif [ "$display_type" = "3" ]; then
		jq_program="$jq_program"' + "\t" + .uri[0:'$max_str_width']'
	elif [ "$display_type" = "5" ]; then
		jq_program='.[] | (.index | tostring) + " " + .title[0:'$max_str_width'] + "\r " + .uri[0:'$max_str_width'] + "\r " + .tags'
	fi
	content="$(buku --nostdin --nc --np --nostdin --print --json)"
	if [[ "$content" = 'buku: waiting'* ]]; then
		content="$(echo "$content" | tail -n+2)"
	fi
	echo "$content" | jq --raw-output "$jq_program" | column -t -s $'\t'
}

getId() {
	id="${2%% *}"
	if [ -z "$id" ]; then
		prev=""
		IFS=$'\n'
		for line in $1; do
			if [ "$2" = "$line" ]; then
				id="${prev%% *}"
				break
			else
				prev="$line"
			fi
		done
	fi
	echo $id
}

getTitleFromId() {
	buku --nostdin --nc --np --print "${1}" --json | jq --raw-output '.title'
}

getUrlFromId() {
	buku --nostdin --nc --np --print "${1}" --json | jq --raw-output '.uri'
}

getCommentFromId() {
	buku --nostdin --nc --np --print "${1}" --json | jq --raw-output '.description'
}

getTagsFromId() {
	buku --nostdin --nc --np --print "${1}" --json | jq --raw-output '.tags'
}

if [[ $1 == "add" ]]; then
	addMark "$2"
else
	mode=bookmarks main
fi
